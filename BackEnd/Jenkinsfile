pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerHubCredentials')
        SONARQUBE_TOKEN = 'squ_498586f2e38c3380791bc196a9426339c500f3c0'
        SONARQUBE_SERVER = 'http://localhost:9000'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/zinebzarda/ENAA-Fil-Rouge.git'
            }
        }

        stage('Build & Test filRouge') {
            steps {
                dir('BackEnd') {
                    withMaven(maven: 'mvn') {
                        bat 'mvn clean install'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarQubeScanner'

                    dir('BackEnd') {
                        bat "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=BackEnd -Dsonar.sources=. -Dsonar.host.url=${SONARQUBE_SERVER} -Dsonar.login=${SONARQUBE_TOKEN} -Dsonar.java.binaries=target/classes"
                    }
                }
            }
        }

//         stage('Build Docker Image & Push') {
//             steps {
//                 dir('BackEnd') {
//                     script {
//                         bat 'docker context use default'
//
//                         def dockerImage = docker.build("zinebaz/filrouge:${env.TAG_VERSION ?: '17'}")
//                             docker.withRegistry('https://index.docker.io/v1/', 'dockerHubCredentials') {
//                             dockerImage.push()
//                         }
//                     }
//                 }
//             }
//         }
          stage('Build Docker Image & Push') {
              steps {
                  dir('BackEnd') {
                      script {
                          try {
                              bat 'docker context use default'

                              def dockerImage = docker.build("zinebaz/filrouge:${env.TAG_VERSION ?: '17'}", "--no-cache .")

                              docker.withRegistry('https://index.docker.io/v1/', 'dockerHubCredentials') {
                                  dockerImage.push()
                              }
                          } catch (Exception e) {
                              echo "Docker build or push failed: ${e.message}"
                              bat 'docker info'
                              bat 'docker version'
                              error "Docker stage failed"
                          }
                      }
                  }
              }
          }
    }

//         stage('Deploy with Docker Compose') {
//             steps {
//                 dir('BackEnd') {
//                     bat 'docker-compose up -d'
//                 }
//             }
//         }

}
