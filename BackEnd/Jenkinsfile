pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerHubCredentials')
        SONARQUBE_TOKEN = 'squ_498586f2e38c3380791bc196a9426339c500f3c0'
        SONARQUBE_SERVER = 'http://localhost:9000'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/zinebzarda/ENAA-Fil-Rouge.git'
            }
        }

        stage('Build & Test filRouge') {
            steps {
                dir('BackEnd') {
                    withMaven(maven: 'mvn') {
                        bat 'mvn clean install'
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    def scannerHome = tool 'SonarQubeScanner'

                    dir('BackEnd') {
                        bat "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=BackEnd -Dsonar.sources=. -Dsonar.host.url=${SONARQUBE_SERVER} -Dsonar.login=${SONARQUBE_TOKEN} -Dsonar.java.binaries=target/classes"
                    }
                }
            }
        }

        stage('Build Docker Image & Push') {
            steps {
                dir('BackEnd') {
                    script {
                        try {
                            bat 'docker context use default'

                            echo "Starting Docker build..."
                            def dockerImage = docker.build("zinebaz/filrouge:${env.TAG_VERSION ?: '17'}", "--no-cache .")
                            echo "Docker build completed successfully."

                            echo "Attempting Docker login..."
                            docker.withRegistry('https://index.docker.io/v1/', 'dockerHubCredentials') {
                                echo "Docker login successful. Starting image push..."
                                dockerImage.push()
                                echo "Docker push completed successfully."
                            }
                        } catch (Exception e) {
                            echo "Docker operation failed: ${e.message}"
                            if (e.message.contains("unauthorized: incorrect username or password")) {
                                error "Docker Hub authentication failed. Please check your credentials in Jenkins."
                            } else {
                                bat 'docker info'
                                bat 'docker version'
                                error "Docker stage failed: ${e.message}"
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy with Docker Compose') {
            steps {
                dir('BackEnd') {
                    bat 'docker-compose up -d'
                }
            }
        }
    }
}
